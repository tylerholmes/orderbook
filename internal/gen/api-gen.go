// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for OrderSide.
const (
	Buy  OrderSide = "buy"
	Sell OrderSide = "sell"
)

// Defines values for OrderStatus.
const (
	Cancelled       OrderStatus = "cancelled"
	Filled          OrderStatus = "filled"
	PartiallyFilled OrderStatus = "partially_filled"
	Pending         OrderStatus = "pending"
)

// Order defines model for Order.
type Order struct {
	Id       *string      `json:"id,omitempty"`
	Price    float32      `json:"price"`
	Quantity float32      `json:"quantity"`
	Side     OrderSide    `json:"side"`
	Status   *OrderStatus `json:"status,omitempty"`
	Symbol   string       `json:"symbol"`
}

// OrderSide defines model for Order.Side.
type OrderSide string

// OrderStatus defines model for Order.Status.
type OrderStatus string

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	OrderId *string `json:"orderId,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// Orderbook defines model for Orderbook.
type Orderbook struct {
	Asks   *[]PriceLevel `json:"asks,omitempty"`
	Bids   *[]PriceLevel `json:"bids,omitempty"`
	Symbol *string       `json:"symbol,omitempty"`
}

// PriceLevel defines model for PriceLevel.
type PriceLevel struct {
	Price    *float32 `json:"price,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
}

// PostOrdersJSONRequestBody defines body for PostOrders for application/json ContentType.
type PostOrdersJSONRequestBody = Order

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get orderbook for a symbol
	// (GET /orderbook/{symbol})
	GetOrderbookSymbol(ctx echo.Context, symbol string) error
	// Get all orders
	// (GET /orders)
	GetOrders(ctx echo.Context) error
	// Place a new order
	// (POST /orders)
	PostOrders(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOrderbookSymbol converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderbookSymbol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "symbol" -------------
	var symbol string

	err = runtime.BindStyledParameterWithOptions("simple", "symbol", ctx.Param("symbol"), &symbol, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrderbookSymbol(ctx, symbol)
	return err
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrders(ctx)
	return err
}

// PostOrders converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOrders(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/orderbook/:symbol", wrapper.GetOrderbookSymbol)
	router.GET(baseURL+"/orders", wrapper.GetOrders)
	router.POST(baseURL+"/orders", wrapper.PostOrders)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUwW7UMBD9lWjgGDUBLlVucEGVKrGCY1Uhx5l03Tq26xkXRav8O7KTTQIJBUG57Doz",
	"43nz3rzkBNJ2zho0TFCdgOQRO5GOn3yDPh6ctw49K0xh1cRf7h1CBcRemTsYcnBeSVxlTOhq9DHzGIRh",
	"xf1uklSTbqEJHVQ3UIceciDUGm7zLQqx4EDrCw5NE5M5tEprbCAHJzwroXX/dQ5JYSSm827Xvqut3qE1",
	"5ODxMSiPTcSa6qapV8zO9Jfmtr5HybF5kvEzkrOGcCunjemrfU0Xttu59nFqax+2GIIextUxdunw2mML",
	"FbwqluUX0+aLQ2RyjU+oYYER3os+PteqealWz6m+YbdqtaH3V9bbgsSQMq1NxYp1zM2iZu8PV5DDE3pS",
	"1kAFby7KizJiWIdGOAUVvEuh6D8+psEKe75enEa2QwzfIafNO/SClTVx+/AReQb7cvaZE150yOgJqpsT",
	"qAgcu0MORnRJs3Pp4lP2AfPpRd5T9zYWj3ZMU74ty/gnrWE0aTLhnFYyzVbcU6R7WvV7buOLCZOcDZL0",
	"yvEo2SJmI1ikFVDoOuH7kX82y5W11mcim8jFwlFK+q18BP/I7o+MPX4aN57eUr5WxJlts2n6LWWh9ZzM",
	"wVna4XawtCb3GJD4g236l93aOP6PNhr+t1Xm7+Kv7JI5LSQ2GQUpkagNWvc/yXiIFZnIDH4bpRybEfqn",
	"84sTvIYKjsyuKgptpdBHS1xdlpclDLfD9wAAAP//LiqwcwUHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
